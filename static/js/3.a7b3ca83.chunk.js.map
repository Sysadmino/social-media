{"version":3,"sources":["hoc/withAuthRedirect.js","Components/Profile/ProfileInfo/profile-info.module.scss","Components/Profile/ProfileInfo/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","ProfileStatus","profileStatus","updateUserProfileStatus","isOwner","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","onBlur","value","onChange","e","newStatus","target","onDoubleClick","React","memo","ProfileDataForm","saveProfileCallback","profile","useForm","defaultValues","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","mode","register","handleSubmit","onSubmit","data","type","placeholder","name","ProfileInfo","saveProfile","updateUserProfilePhoto","Preloader","inBlock","transparent","className","styles","info","alt","src","photos","small","profilePhoto","files","length","values","goToEditMode","description","ProfileData","contactsList","Object","keys","contacts","filter","x","onClick","map","contactTitle","contactValue","Contact","Profile","compose","profilePage","authorizedUserId","id","getUserProfile","actions","getUserProfileStatus","updatePhotoRequest","userId","useParams","history","useHistory","push","console","error"],"mappings":"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","file":"static/js/3.a7b3ca83.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nconst withAuthRedirect = (Component) => {\r\n  let RedirectComponent = (props) => {\r\n    if (!props.isAuth) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n    return <Component {...props} />;\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n\r\nexport default withAuthRedirect;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header-img\":\"profile-info_header-img__1-ZB_\",\"ava-img\":\"profile-info_ava-img__3bjYi\",\"info\":\"profile-info_info__2LN_w\",\"description\":\"profile-info_description__1bMXw\",\"info-block\":\"profile-info_info-block__2VTOf\",\"edit-button\":\"profile-info_edit-button__2Q6Di\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\n//import styles from \"./profile-info.module.scss\";\r\n\r\ninterface IProfileStatusProps {\r\n  isOwner: boolean;\r\n  profileStatus: string;\r\n  updateUserProfileStatus: (newStatus: string) => void;\r\n}\r\n\r\nconst ProfileStatus: React.FC<IProfileStatusProps> = (props) => {\r\n  const { profileStatus, updateUserProfileStatus, isOwner } = props;\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(profileStatus);\r\n\r\n  useEffect(() => {\r\n    setStatus(profileStatus);\r\n  }, [profileStatus]);\r\n\r\n  const activateEditMode = () => {\r\n    if (isOwner) {\r\n      setEditMode(true);\r\n    } else {\r\n      setEditMode(false);\r\n    }\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    updateUserProfileStatus(status);\r\n  };\r\n\r\n  const setStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    let newStatus = e.target.value;\r\n    setStatus(newStatus);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n            onChange={setStatusHandler}\r\n          />\r\n        </div>\r\n      )}\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {profileStatus || \"Нет статуса\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ProfileStatus);\r\n","import { Input, Textarea } from \"../../Common/FormsControls/FormsControls\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { ContactType, ProfileType } from \"../../../types/types\";\r\n\r\ninterface IProfileDataFormProps {\r\n  profile: ProfileType;\r\n  saveProfileCallback: (values: ProfileType) => void;\r\n}\r\n\r\ninterface FormValues {\r\n  contacts: ContactType;\r\n  fullName: string;\r\n  aboutMe: string;\r\n  lookingForAJob: boolean;\r\n  lookingForAJobDescription: string;\r\n  photos: any;\r\n  userId: any;\r\n}\r\n\r\nconst ProfileDataForm: React.FC<IProfileDataFormProps> = (props) => {\r\n  const { saveProfileCallback, profile } = props;\r\n  const { register, handleSubmit } = useForm<FormValues>({\r\n    defaultValues: {\r\n      fullName: profile?.fullName,\r\n      aboutMe: profile?.aboutMe,\r\n      lookingForAJob: profile?.lookingForAJob,\r\n      lookingForAJobDescription: profile?.lookingForAJobDescription,\r\n    },\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const onSubmit: SubmitHandler<FormValues> = (data) => {\r\n    saveProfileCallback(data);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <div>\r\n        <b>Full name:</b>\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"Full name\"\r\n          name={{ ...register(\"fullName\") }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <b>About me:</b>\r\n        <Textarea\r\n          type=\"text\"\r\n          placeholder=\"About me\"\r\n          name={{ ...register(\"aboutMe\") }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job:</b>\r\n        <Input type=\"checkbox\" name={{ ...register(\"lookingForAJob\") }} />\r\n      </div>\r\n      <div>\r\n        <b>My professional skills:</b>\r\n        <Textarea\r\n          type=\"text\"\r\n          placeholder=\"My professional skills\"\r\n          name={{\r\n            ...register(\"lookingForAJobDescription\"),\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>\r\n        {/*TODO: Сейчас происходит дублирование полей соц сетей. Найти решение данной проблемы*/}\r\n\r\n        {/* {Object.keys(profile.contacts).map((x) => {\r\n          return (\r\n            <div key={x}>\r\n              <b>\r\n                {x}:{\" \"}\r\n                <Input\r\n                  type=\"text\"\r\n                  name={{\r\n                    ...register(x),\r\n                  }}\r\n                  // name={`${x}`}\r\n                  placeholder={x}\r\n                />\r\n              </b>\r\n            </div>\r\n          );\r\n        })} */}\r\n\r\n        <div>\r\n          <b>\r\n            vk:{\" \"}\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"vk\"\r\n              name={{ ...register(\"contacts.vk\") }}\r\n            />\r\n          </b>\r\n        </div>\r\n        <div>\r\n          <b>\r\n            facebook:{\" \"}\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"facebook\"\r\n              name={{ ...register(\"contacts.facebook\") }}\r\n            />\r\n          </b>\r\n        </div>\r\n        <div>\r\n          <b>\r\n            website:{\" \"}\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"website\"\r\n              name={{ ...register(\"contacts.website\") }}\r\n            />\r\n          </b>\r\n        </div>\r\n        <div>\r\n          <b>\r\n            twitter:{\" \"}\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"twitter\"\r\n              name={{ ...register(\"contacts.twitter\") }}\r\n            />\r\n          </b>\r\n        </div>\r\n        <div>\r\n          <b>\r\n            instagram:{\" \"}\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"instagram\"\r\n              name={{ ...register(\"contacts.instagram\") }}\r\n            />\r\n          </b>\r\n        </div>\r\n        <div>\r\n          <b>\r\n            youtube:{\" \"}\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"youtube\"\r\n              name={{ ...register(\"contacts.youtube\") }}\r\n            />\r\n          </b>\r\n        </div>\r\n        <div>\r\n          <b>\r\n            github:{\" \"}\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"github\"\r\n              name={{ ...register(\"contacts.github\") }}\r\n            />\r\n          </b>\r\n        </div>\r\n        <div>\r\n          <b>\r\n            mainLink:{\" \"}\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"mainLink\"\r\n              name={{ ...register(\"contacts.mainLink\") }}\r\n            />\r\n          </b>\r\n        </div>\r\n      </div>\r\n      <button>save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ProfileDataForm;\r\n\r\n// import { reduxForm, Field } from \"redux-form\";\r\n// import { Input, Textarea } from \"../../Common/FormsControls/FormsControls\";\r\n\r\n// const ProfileDataForm = (props) => {\r\n//   const { handleSubmit } = props;\r\n//   return (\r\n//     <form onSubmit={handleSubmit}>\r\n//       <div>\r\n//         <b>Full name:</b>\r\n//         <Field name=\"fullName\" placeholder=\"Full name\" component={Input} />\r\n//       </div>\r\n//       <div>\r\n//         <b>About me:</b>\r\n//         <Field name=\"aboutMe\" placeholder=\"About me\" component={Textarea} />\r\n//       </div>\r\n//       <div>\r\n//         <b>Looking for a job:</b>\r\n//         <Field name=\"lookingForAJob\" component={Input} type=\"checkbox\" />\r\n//       </div>\r\n//       <div>\r\n//         <b>My professional skills:</b>\r\n//         <Field\r\n//           name=\"lookingForAJobDescription\"\r\n//           placeholder=\"My professional skills\"\r\n//           component={Textarea}\r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         <b>Contacts</b>\r\n//         {Object.keys(props.profile.contacts).map((x) => {\r\n//           return (\r\n//             <div key={x}>\r\n//               <b>\r\n//                 {x}:{\" \"}\r\n//                 <Field\r\n//                   name={`contacts.${x}`}\r\n//                   placeholder={x}\r\n//                   component={Input}\r\n//                 />\r\n//               </b>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//       <button>save</button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// const ProfileDataReduxForm = reduxForm({\r\n//   form: \"EditProfileForm\",\r\n// })(ProfileDataForm);\r\n\r\n// export default ProfileDataReduxForm;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport styles from \"./profile-info.module.scss\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport profilePhoto from \"../../../Assets/Images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport { ContactType, ProfileType } from \"../../../types/types\";\r\n\r\ninterface IProfileInfoProps {\r\n  isOwner: boolean;\r\n  profile: ProfileType;\r\n  profileStatus: string;\r\n  saveProfile: (profile: ProfileType) => void;\r\n  updateUserProfileStatus: (newStatus: string) => void;\r\n  updateUserProfilePhoto: (file: File) => void;\r\n}\r\n\r\nconst ProfileInfo: React.FC<IProfileInfoProps> = (props) => {\r\n  const {\r\n    isOwner,\r\n    profile,\r\n    profileStatus,\r\n    saveProfile,\r\n    updateUserProfileStatus,\r\n    updateUserProfilePhoto,\r\n  } = props;\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader inBlock transparent />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length && e.target.files?.length !== 0)\r\n      updateUserProfilePhoto(e.target.files[0]);\r\n  };\r\n\r\n  const onSubmit = (values: ProfileType): void => {\r\n    saveProfile(values);\r\n    setEditMode(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.info}>\r\n        <div className={styles[\"info-block\"]}>\r\n          <img\r\n            alt=\"\"\r\n            className={styles[\"ava-img\"]}\r\n            src={profile?.photos?.small || profilePhoto}\r\n          />\r\n          {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n          <br />\r\n          {editMode ? (\r\n            <ProfileDataForm saveProfileCallback={onSubmit} profile={profile} />\r\n          ) : (\r\n            <ProfileData\r\n              profile={profile}\r\n              isOwner={isOwner}\r\n              goToEditMode={() => {\r\n                setEditMode(true);\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className={styles.description}>\r\n          <ProfileStatus\r\n            isOwner={isOwner}\r\n            profileStatus={profileStatus}\r\n            updateUserProfileStatus={updateUserProfileStatus}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface IProfileDataProps {\r\n  isOwner: boolean;\r\n  profile: ProfileType;\r\n  goToEditMode: () => void;\r\n}\r\n\r\nconst ProfileData: React.FC<IProfileDataProps> = (props) => {\r\n  const { isOwner, profile } = props;\r\n  const contactsList = Object.keys(profile.contacts).filter(\r\n    (x) => profile.contacts[x as keyof ContactType] !== \"\"\r\n  );\r\n  return (\r\n    <>\r\n      {isOwner && (\r\n        <button className={styles[\"edit-button\"]} onClick={props.goToEditMode}>\r\n          Edit profile\r\n        </button>\r\n      )}\r\n      {profile?.fullName && (\r\n        <div>\r\n          <b>Full name:</b> {profile?.fullName}\r\n        </div>\r\n      )}\r\n      {profile?.aboutMe && (\r\n        <div>\r\n          <b>About me:</b> {profile?.aboutMe}\r\n        </div>\r\n      )}\r\n      {profile?.lookingForAJob && (\r\n        <div>\r\n          <b>Looking for a job:</b> {profile?.lookingForAJob ? \"Yes\" : \"No\"}\r\n        </div>\r\n      )}\r\n      {profile?.lookingForAJobDescription && (\r\n        <div>\r\n          <b>My professional skills:</b> {profile?.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      {profile?.contacts && contactsList.length !== 0 && (\r\n        <div>\r\n          <b>Contacts</b>\r\n          {Object.keys(profile.contacts).map(\r\n            (x) =>\r\n              profile.contacts[x as keyof ContactType] !== \"\" && (\r\n                <Contact\r\n                  key={x}\r\n                  contactTitle={x}\r\n                  contactValue={profile.contacts[x as keyof ContactType]}\r\n                />\r\n              )\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\ninterface IContactProps {\r\n  contactTitle: string;\r\n  contactValue: string;\r\n}\r\n\r\nconst Contact: React.FC<IContactProps> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div>\r\n      <b>{contactTitle}:</b> {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ProfileInfo);\r\n","import React from \"react\";\r\nimport { ProfileType } from \"../../types/types\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\ninterface IProfileProps {\r\n  isOwner: boolean;\r\n  profile: ProfileType;\r\n  profileStatus: string;\r\n  saveProfile: (profile: ProfileType) => void;\r\n  updateUserProfileStatus: (newStatus: string) => void;\r\n  updateUserProfilePhoto: (file: File) => void;\r\n}\r\n\r\nconst Profile: React.FC<IProfileProps> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        saveProfile={props.saveProfile}\r\n        profileStatus={props.profileStatus}\r\n        updateUserProfilePhoto={props.updateUserProfilePhoto}\r\n        updateUserProfileStatus={props.updateUserProfileStatus}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport Profile from \"./Profile\";\r\nimport { compose } from \"redux\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport { AppStateType } from \"../../Redux/redux-store\";\r\nimport { ProfileType } from \"../../types/types\";\r\nimport { actions } from \"../../Redux/profile-reducer\";\r\n\r\ninterface IProfileContainerProps {\r\n  profile: ProfileType;\r\n  profileStatus: string;\r\n  authorizedUserId: number | null;\r\n  isAuth: boolean;\r\n  saveProfile: (profile: ProfileType) => void;\r\n  updateUserProfileStatus: (newStatus: string) => void;\r\n  updateUserProfilePhoto: (file: File) => void;\r\n  getUserProfile: (userId: number) => void;\r\n  getUserProfileStatus: (userId: number) => void;\r\n}\r\n\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\nconst ProfileContainer: React.FC<\r\n  IProfileContainerProps & RouteComponentProps<PathParamsType>\r\n> = (props) => {\r\n  const { authorizedUserId, getUserProfile, getUserProfileStatus } = props;\r\n\r\n  const { userId } = useParams<{ userId: string }>();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    let id: number | null = +userId;\r\n    if (!id) {\r\n      id = authorizedUserId;\r\n      if (!id) {\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n    if (!id) {\r\n      console.error(\r\n        \"id should exists in URI params or in state (authorizedUserId)\"\r\n      );\r\n    } else {\r\n      getUserProfile(id);\r\n      getUserProfileStatus(id);\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [userId]);\r\n\r\n  return <Profile {...props} isOwner={!userId} />;\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    profileStatus: state.profilePage.profileStatus,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile: actions.getUserProfile,\r\n    getUserProfileStatus: actions.getUserProfileStatus,\r\n    updateUserProfileStatus: actions.updateUserProfileStatus,\r\n    updateUserProfilePhoto: actions.updatePhotoRequest,\r\n    saveProfile: actions.saveProfile,\r\n  }),\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}